# -*- coding: utf-8 -*-
"""model_training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/126GHpghQWbs7us91zyu4uoOGtobbfUkt
"""

import pandas as pd
import numpy as np
!pip install scikit-learn

train_df = pd.read_csv('./train_lpp.csv')
train_df.head()

train_df.info()

"""## Binary Encoding of Categorical Variables"""

train_df['Gender']= train_df['Gender'].map({'Male':0, 'Female':1})
train_df['Married']= train_df['Married'].map({'No':0, 'Yes':1})
train_df['Loan_Status']= train_df['Loan_Status'].map({'N':0, 'Y':1})

train_df.info()

"""## Checking for Missing Values"""

train_df.isnull().sum()

## dropping all the missing values
train_df = train_df.dropna()
train_df.isnull().sum()

"""## Segregating the target variable from the features"""

X = train_df[['Gender', 'Married', 'ApplicantIncome', 'LoanAmount', 'Credit_History']]
y = train_df.Loan_Status
X.shape, y.shape

"""## Splitting the data"""

from sklearn.model_selection import train_test_split

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=5)

"""## Model Training"""

from sklearn import linear_model


model = linear_model.LogisticRegression()
model.fit(X_train, y_train)

"""## Cross Validation"""

from sklearn.metrics import accuracy_score

pred_val = model.predict(X_val)
accuracy_score(y_val, pred_val)

pred_train = model.predict(X_train)
accuracy_score(y_train, pred_train)

"""## Saving the model"""

# saving the model
import pickle

pickle_out = open("classifier.pkl", mode = "wb")
pickle.dump(model, pickle_out)
pickle_out.close()

"""## Test Prediction for a Sample Data Point"""

loan_application = {
    'Gender': "Male",
    'Married': "Unmarried",
    'ApplicantIncome': 50000,
    'Credit_History': "Cleared Debts",
    'LoanAmount': 500000
}

model_pickle = open("classifier.pkl", 'rb')
clf = pickle.load(model_pickle)

# defining the function which will make the prediction using the data which the user inputs
# @app.route('/predict', method = ['POST'])


from flask import Flask, request, jsonify

def prediction(loan_req):
    # Pre-processing user input

#     loan_req = request.get_json()
    print(loan_req)

    if loan_req['Gender'] == "Male":
        Gender = 0
    else:
        Gender = 1

    if loan_req['Married'] == "Unmarried":
        Married = 0
    else:
        Married = 1

    if loan_req['Credit_History'] == "Unclear Debts":
        Credit_History = 0
    else:
        Credit_History = 1

    ApplicantIncome = loan_req['ApplicantIncome']
    LoanAmount = loan_req['LoanAmount'] / 1000

    # Making predictions
    prediction = clf.predict(
        [[Gender, Married, ApplicantIncome, LoanAmount, Credit_History]])

    if prediction == 0:
        pred = 'Rejected'
    else:
        pred = 'Approved'
    return pred

prediction(loan_application)

import requests
!pip install flask-ngrok

!ngrok authtoken '2cnDkwAP4ETEgpH9Asfa2T2s6Nc_6A735iox89RmjVKSJTDhG'

r = requests.post("http://13.233.127.47:5000/predict", json=loan_application)

r.content

